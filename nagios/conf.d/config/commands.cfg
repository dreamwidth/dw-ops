#
# commands.cfg
#
# Define commands that we use to check various components.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#      Robby Griffin <alierak@gmail.com>
#
# Copyright (c) 2009-2010 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself.  For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#

# Slightly abbreviated notifications for pagers

define command {
    command_name  dw_notify_host_epager
    command_line  /usr/bin/printf "%b" "at $LONGDATETIME$\n$HOSTOUTPUT$\n($HOSTALIAS$/$HOSTADDRESS$)\n$HOSTACKAUTHOR$ $HOSTACKCOMMENT$\n" | /usr/bin/mail -s "$NOTIFICATIONTYPE$: $HOSTNAME$ is $HOSTSTATE$" $CONTACTPAGER$
}

define command {
    command_name  dw_notify_service_epager
    command_line  /usr/bin/printf "%b" "at $LONGDATETIME$\n$SERVICEOUTPUT$\n($HOSTALIAS$/$HOSTADDRESS$)\n$SERVICEACKAUTHOR$ $SERVICEACKCOMMENT$\n" | /usr/bin/mail -s "$NOTIFICATIONTYPE$: $HOSTNAME$/$SERVICEDESC$ is $SERVICESTATE$" $CONTACTPAGER$
}


# check_mysql is a basic check for a database being available
define command {
    command_name  dw_check_mysql
    command_line  $USER1$/check_mysql -H $HOSTADDRESS$ -u $USER3$ -p $USER4$
}


# replication check
define command {
    command_name  dw_check_mysql_repl
    command_line  $USER1$/custom/check_mysql_replication.pl -H $HOSTADDRESS$ -u $USER3$ -p $USER4$
}


# checks that we are not falling behind on TheSchwartz jobs
define command {
    command_name  dw_check_theschwartz_queue
    command_line  $USER1$/check_mysql_query -H $HOSTADDRESS$ -u $USER5$ -p $USER6$ -d dw_schwartz -w 150 -c 300 -q "SELECT COUNT(*) FROM job WHERE funcid NOT IN (10, 11) AND (run_after < UNIX_TIMESTAMP()) AND (grabbed_until < UNIX_TIMESTAMP())"
}


# check memcache machine to ensure it's listening
define command {
    command_name  dw_check_memcache
    command_line  $USER1$/check_tcp -H $HOSTADDRESS$ -p 11211
}


# check mogstored machine to ensure it's listening
define command {
    command_name  dw_check_mogstored
    command_line  $USER1$/check_http -H $HOSTADDRESS$ -p 7500 -u /
}


# check lighttpd machine to ensure it's listening
define command {
    command_name  dw_check_mogstored_getport
    command_line  $USER1$/check_http -H $HOSTADDRESS$ -p 81 -u /just-for-nagios
}


# check mogilefsd machine to ensure it's listening
define command {
    command_name  dw_check_mogilefsd
    command_line  $USER1$/check_tcp -H $HOSTADDRESS$ -p 7001
}


# check ddlockd machine to ensure it's listening
define command {
    command_name  dw_check_ddlockd
    command_line  $USER1$/check_tcp -H $HOSTADDRESS$ -p 7002
}


# check gearmand machine to ensure it's listening
define command {
    command_name  dw_check_gearmand
    command_line  $USER1$/check_tcp -H $HOSTADDRESS$ -p 7003
}


# determine if our SSL is up
define command {
    command_name  dw_check_ssl_create
    command_line  $USER1$/check_http -H www.dreamwidth.org -I $HOSTADDRESS$ -u /create -S -f critical
}


# check sda in a two disk configuration; this is a remote check
define command {
    command_name  dw_ssh_check_disk_sda
    command_line  $USER1$/check_by_ssh -t 30 -l root -H $HOSTADDRESS$ "$USER1$/custom/check_smart.pl -d /dev/sda -i ata"
}


# check sda in a two (scsi) disk configuration; this is a remote check
define command {
        command_name  dw_ssh_check_disk_sda_scsi
                command_line  $USER1$/check_by_ssh -t 30 -l root -H $HOSTADDRESS$ "$USER1$/custom/check_smart.pl -d /dev/sda -i scsi"
}


# check sdb in a two disk configuration; this is a remote check
define command {
    command_name  dw_ssh_check_disk_sdb
    command_line  $USER1$/check_by_ssh -t 30 -l root -H $HOSTADDRESS$ "$USER1$/custom/check_smart.pl -d /dev/sdb -i ata"
}


# check sdb in a two (scsi) disk configuration; this is a remote check
define command {
        command_name  dw_ssh_check_disk_sdb_scsi
                command_line  $USER1$/check_by_ssh -t 30 -l root -H $HOSTADDRESS$ "$USER1$/custom/check_smart.pl -d /dev/sdb -i scsi"
}


# check space on all disks; this is a remote check
define command {
    command_name  dw_ssh_check_all_disks
    command_line  $USER1$/check_by_ssh -t 30 -l root -H $HOSTADDRESS$ "$USER1$/check_disk -w $ARG1$ -c $ARG2$ -e"
}

